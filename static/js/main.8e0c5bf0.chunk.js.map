{"version":3,"sources":["Components/Quote.module.scss","redux/quote-reducer.js","Components/Quote.jsx","api/api.js","App.js","reportWebVitals.js","redux/redux-store.js","index.js"],"names":["module","exports","SET_QUOTE","TOGGLE_IS_FETCHING","initialState","quoteData","colors","toggleIsFetching","toggleIsFetchingActionCreator","type","quoteReducer","state","action","fetching","QuoteMachine","props","changeQuote","bind","color","this","requestNewQuote","setState","Math","floor","random","length","className","s","quoteBox","style","backgroundColor","id","text","content","author","button","disabled","onClick","icons","href","target","image","src","React","Component","connect","quote","dispatch","a","axios","get","responce","data","App","Quote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","createStore","combineReducers","applyMiddleware","store","thunkMiddleware","renderEntireDoc","ReactDOM","render","document","getElementById","getState","subscribe"],"mappings":"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","file":"static/js/main.8e0c5bf0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quoteBox\":\"Quote_quoteBox__RDN5N\",\"text\":\"Quote_text__2ofOO\",\"author\":\"Quote_author__2ZfwI\",\"button\":\"Quote_button__1hC0F\",\"icons\":\"Quote_icons__10Xhm\",\"image\":\"Quote_image__1ICrp\"};","import React from 'react';\r\nimport { getNewQuoteApi } from '../api/api';\r\n\r\nconst SET_QUOTE = \"quote_machine/QUOTE/SET_QUOTE\";\r\nconst TOGGLE_IS_FETCHING = \"quote_machine/QUOTE/TOGGLE_IS_FETCHING\";\r\n\r\nconst initialState = {\r\n    quoteData: {},\r\n    colors: [\r\n        '#d0d4c3',\r\n        '#9aa88f',\r\n        '#edead8',\r\n        '#caccb1',\r\n        '#a6b698',\r\n        '#f3f0f0',\r\n        '#e5e5d7',\r\n        '#e3dec9',\r\n        '#a3a36c',\r\n        '#85a28d',\r\n        '#93aa90'\r\n      ],\r\n    toggleIsFetching: false  \r\n    \r\n}\r\n\r\nconst quoteReducer = (state = initialState, action) =>{\r\n    switch(action.type){\r\n    case SET_QUOTE:\r\n        return {\r\n            ...state,\r\n            quoteData: action.quoteData\r\n        }\r\n    case TOGGLE_IS_FETCHING:\r\n        return {\r\n            ...state,\r\n            toggleIsFetching: action.fetching\r\n        }    \r\n\r\n     default:\r\n         return state;   \r\n}\r\n};\r\n\r\n\r\nexport const setQuote =(quoteData)=>({\r\n    type: SET_QUOTE,\r\n    quoteData\r\n});\r\n\r\nexport const toggleIsFetchingActionCreator = (toggleIsFetching)=>({\r\n    type: TOGGLE_IS_FETCHING,\r\n    toggleIsFetching\r\n});\r\n\r\n\r\nexport const requestNewQuote = () => async (dispatch) =>{\r\n        dispatch(toggleIsFetchingActionCreator(true));\r\n        let responce = await getNewQuoteApi();\r\n        dispatch(setQuote(responce.data));\r\n        dispatch(toggleIsFetchingActionCreator(false));    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default quoteReducer;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { requestNewQuote } from '../redux/quote-reducer';\r\nimport s from './Quote.module.scss';\r\n\r\n\r\nclass QuoteMachine extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.changeQuote = this.changeQuote.bind(this);\r\n    this.state ={\r\n      color: \"#817f46\"\r\n    }\r\n\r\n  }\r\n  \r\n  changeQuote(){\r\n    this.props.requestNewQuote();\r\n    this.setState({\r\n      color: this.props.colors[Math.floor(Math.random() * this.props.colors.length)]\r\n    \r\n  })\r\n}\r\n  componentDidMount(){\r\n    this.props.requestNewQuote();\r\n    }\r\n\r\n\r\n  render(){\r\n    return(<div className={s.quoteBox} style={{backgroundColor: this.state.color}} id={\"quote-box\"}>\r\n        <div className={s.text} id={\"text\"}>\"{this.props.quoteData.content}\"</div>\r\n        <div className={s.author}  id={\"author\"}>-{this.props.quoteData.author}</div>\r\n        <button className={s.button} disabled={this.props.toggleIsFetching} onClick={this.changeQuote} id={\"new-quote\"}>New quote</button>\r\n        <div className={s.icons}>\r\n          <a  href={\"https://twitter.com/intent/tweet\"} target={\"_blank\"}id={\"tweet-quote\"}><img className={s.image} src={\"https://cdn.iconscout.com/icon/free/png-256/twitter-1722376-1466162.png\"}/></a>\r\n        </div>\r\n        \r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps =(state)=>({\r\n  quoteData: state.quote.quoteData,\r\n  colors: state.quote.colors,\r\n  toggleIsFetching: state.quote.toggleIsFetching\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, {requestNewQuote})(QuoteMachine);  ","\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nexport const getNewQuoteApi = () => {\r\n  return axios\r\n    .get(\"https://api.quotable.io/random\")\r\n} \r\n\t","\nimport './App.css';\nimport QuoteMachine from './Components/Quote';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuoteMachine />\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport quoteReducer from './quote-reducer';\r\n\r\n\r\nconst { createStore, combineReducers, applyMiddleware } = require(\"redux\");\r\n\r\nlet reducers = combineReducers({\r\n    quote: quoteReducer\r\n    \r\n});\r\n\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/redux-store';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nlet renderEntireDoc = (state) => {\n  ReactDOM.render( \n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>, document.getElementById('root')\n  );\n  \n}\n\n\nrenderEntireDoc(store.getState());\n\nstore.subscribe(()=>{\nrenderEntireDoc(store.getState())\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}